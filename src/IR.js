// Generated by CoffeeScript 1.7.1
(function() {
  var MixMap, log, ulti;

  if (typeof self === 'undefined') {
    ulti = require('./ulti.js');
  } else {
    ulti = self.ulti;
  }

  MixMap = function() {
    this.i = 1;
    this.ref_map = {};
    return this;
  };

  MixMap.prototype.arrange = function() {
    var additional_pairs_attach, additional_pairs_main, apply_mapping, i, inner_map, key, m, pair, pairs2map, pairs_len, self, swaper, _i, _j, _k, _l, _len, _len1, _len2, _ref, _results;
    self = this;
    pairs2map = [].slice.call(arguments);
    pairs_len = pairs2map.length;
    if (pairs_len < 2) {
      return null;
    }
    apply_mapping = function(_pairs2map) {
      var i, mm_id, obj, obj_type, ref, _i, _ref, _results;
      obj_type = _pairs2map[0][0];
      obj = _pairs2map[0][1];
      mm_id = obj['__MixMapID__'] || self.i++;
      if (!obj['__MixMapID__']) {
        obj['__MixMapID__'] = mm_id;
      }
      if (!self.ref_map[mm_id]) {
        self.ref_map[mm_id] = {};
      }
      _results = [];
      for (i = _i = 1, _ref = _pairs2map.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        ref = _pairs2map[i];
        _results.push(self.ref_map[mm_id][ref[0]] = ref[1]);
      }
      return _results;
    };
    additional_pairs_main = [];
    additional_pairs_attach = [];
    for (_i = 0, _len = pairs2map.length; _i < _len; _i++) {
      pair = pairs2map[_i];
      inner_map = this.get(pair[1]);
      if (!inner_map) {
        additional_pairs_main.push(pair);
      }
      for (key in inner_map) {
        additional_pairs_attach.push([key, inner_map[key]]);
      }
    }
    for (_j = 0, _len1 = additional_pairs_main.length; _j < _len1; _j++) {
      i = additional_pairs_main[_j];
      for (_k = 0, _len2 = additional_pairs_attach.length; _k < _len2; _k++) {
        m = additional_pairs_attach[_k];
        apply_mapping([i, m]);
        apply_mapping([m, i]);
      }
    }
    _results = [];
    for (i = _l = 0, _ref = pairs_len - 1; 0 <= _ref ? _l <= _ref : _l >= _ref; i = 0 <= _ref ? ++_l : --_l) {
      if (i !== 0 && pairs2map[0][1] === pairs2map[i][1]) {
        continue;
      }
      swaper = pairs2map[i];
      pairs2map[i] = pairs2map[0];
      pairs2map[0] = swaper;
      _results.push(apply_mapping(pairs2map));
    }
    return _results;
  };

  MixMap.prototype.get = function(obj, type) {
    var ref;
    if (typeof obj !== 'object' || !obj['__MixMapID__']) {
      return null;
    }
    ref = this.ref_map[obj['__MixMapID__']];
    if (!ref) {
      return null;
    }
    if (type) {
      return ref[type];
    } else {
      return ref;
    }
  };

  if (typeof self === 'undefined') {
    module.exports.MixMap = MixMap;
  } else {
    self.MixMap = MixMap;
  }

  log = function() {};

  log = ulti.log;

}).call(this);

//# sourceMappingURL=IR.map
