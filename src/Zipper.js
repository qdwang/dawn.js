// Generated by CoffeeScript 1.7.1
(function() {
  var Zipper, log, ulti;

  if (typeof self === 'undefined') {
    ulti = require('./ulti.js');
  } else {
    ulti = self.ulti;
  }

  Zipper = function(tree) {
    this.tree = tree;
    this.curr_node = this.tree;
    return this;
  };

  Zipper.prototype.up = function() {
    this.curr_node = this.curr_node.parent;
    return this;
  };

  Zipper.prototype.down = function(selector) {
    this.curr_node = (Zipper.select(this.curr_node, selector))[0];
    return this;
  };

  Zipper.prototype.parent = function(attrs) {
    if (attrs == null) {
      attrs = {};
    }
    return Zipper.findParent(attrs, this.curr_node);
  };

  Zipper.prototype.node = function() {
    return this.curr_node;
  };

  Zipper.select = function(parent_node, selector) {
    var attrs, detector, last_selector, new_ret, node, ret, sa, selectorAttr, selector_arr, walk, _i, _len;
    ret = [];
    selector_arr = selector.split(/\s+/);
    walk = function(node, detect, arr) {
      var leaf, _i, _len, _ref;
      if (node.leaves) {
        _ref = node.leaves;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          leaf = _ref[_i];
          walk(leaf, detect, arr);
        }
      }
      if (detect(node)) {
        return arr.push(node);
      }
    };
    selectorAttr = Zipper.selectorAST;
    detector = function(selector) {
      var sa;
      sa = selectorAttr(selector);
      return function(node) {
        return node[sa.attr] === sa.selector;
      };
    };
    last_selector = selector_arr.pop();
    if (!last_selector) {
      return ret;
    }
    walk(parent_node, detector(last_selector), ret);
    while (last_selector = selector_arr.pop()) {
      if (!last_selector || !ret.length) {
        break;
      }
      new_ret = [];
      sa = selectorAttr(last_selector);
      for (_i = 0, _len = ret.length; _i < _len; _i++) {
        node = ret[_i];
        attrs = {};
        attrs[sa.attr] = last_selector;
        parent_node = Zipper.findParent(attrs, node);
        if (parent_node) {
          new_ret.push(node);
        }
      }
      ret = new_ret;
    }
    return ret;
  };

  Zipper.selectorAST = function(selector) {
    var attr;
    attr = 'lex';
    if (selector[0] === '~') {
      selector = selector.slice(1);
      attr = 'value';
    }
    return {
      attr: attr,
      selector: selector
    };
  };

  Zipper.findParent = function(attrs, node) {
    var attr, curr_node, match, ret;
    if (attrs == null) {
      attrs = {};
    }
    ret = null;
    while (curr_node = node.parent) {
      if (!curr_node) {
        break;
      }
      match = true;
      for (attr in attrs) {
        if (curr_node[attr] !== attrs[attr]) {
          match = false;
        }
      }
      if (match) {
        ret = curr_node;
        break;
      }
      node = curr_node;
    }
    return ret;
  };

  Zipper.rebuildParent = function(syntax_node, parent) {
    var leaf, _i, _len, _ref, _results;
    if (typeof syntax_node.parent === 'string') {
      syntax_node.parent = parent;
    }
    if (syntax_node.leaves) {
      _ref = syntax_node.leaves;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        leaf = _ref[_i];
        _results.push(Zipper.rebuildParent(leaf, syntax_node));
      }
      return _results;
    }
  };

  if (typeof self === 'undefined') {
    module.exports.Zipper = Zipper;
  } else {
    self.Zipper = Zipper;
  }

  log = function() {};

  log = ulti.log;

}).call(this);

//# sourceMappingURL=Zipper.map
