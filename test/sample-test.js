// Generated by CoffeeScript 1.7.1
(function() {
  var IR, LR1, Lex, ST, ast, js_lang, log, lp, markers, mm, non_word, receiver_scope, result, script, st, state, table, ulti;

  js_lang = require('./../javascript-lang.js');

  Lex = require('./../src/lex-parser.js');

  LR1 = require('./../src/LR1-parser.js');

  IR = require('./../src/IR.js');

  ST = require('./../src/symbol-table.js');

  ulti = require('./../src/ulti.js');

  non_word = "./\()\"':,.;<>~!@#$%^&*|+=[]{}`~?-";

  log = ulti.log;

  script = "abc.e(fe,gge)\n\nabc.e()\n\nfff.gg();\n\nvar gt = efne;\n\nfunction abc(){\n    var cc = eeg;\n    cc.eegh();\n}";

  lp = new Lex.LexParser(script, js_lang.prepare_syntax, js_lang.lex_syntax);

  lp.getPatterns();

  lp.lex_list.push('ProgramEnd');

  mm = new IR.MixMap;

  LR1.SyntaxParser.Mix.mixer = function() {
    return mm.arrange.apply(mm, arguments);
  };

  ST.SymbolTable.Mix.mixer = function() {
    return mm.arrange.apply(mm, arguments);
  };

  table = new LR1.SyntaxTable(js_lang.grammar, ['Program'], ['ProgramEnd']);

  state = new LR1.SyntaxParser(lp.lex_list);

  state.parseTable(table);

  ast = state.getAST(['Link', 'stmtend', 'NewLine', 'Comma', 'ParenStart', 'ParenEnd', 'SGO', 'StmtEnd', 'BlockStart', 'BlockEnd', 'VariableDecl', 'S', 'Assign']);

  markers = {
    Receiver: (function(x) {
      return x;
    }),
    Giver: (function(x) {
      return x;
    })
  };

  st = ST.SymbolTable.walkGenerate(ast.syntax_tree, markers, ['Function']);

  log(ast.syntax_tree);

  receiver_scope = mm.get(lp.lex_list[35], 'SyntaxNode').parent.parent.parent.parent;

  result = mm.get(receiver_scope, 'SymbolTable').lookUpTop({
    Receiver: mm.get(lp.lex_list[35], 'SyntaxNode').parent.parent
  });

  log(result.Receiver);

  log(result.Giver);

}).call(this);

//# sourceMappingURL=sample-test.map
