// Generated by CoffeeScript 1.8.0
(function() {
  var autocomplete_plugin, editor, editor_cursor, focused, js2py_plugin, js2py_result_plugin, py2js_plugin, py2js_result_plugin, tip;

  autocomplete_plugin = ace.edit('autocomplete');

  autocomplete_plugin.setTheme('ace/theme/dawnjs');

  autocomplete_plugin.getSession().setMode('ace/mode/javascript');

  js2py_plugin = ace.edit('transpiler-js2py');

  js2py_plugin.setTheme('ace/theme/dawnjs');

  js2py_plugin.getSession().setMode('ace/mode/javascript');

  js2py_result_plugin = ace.edit('transpiler-js2py-result');

  js2py_result_plugin.setTheme('ace/theme/dawnjs');

  js2py_result_plugin.getSession().setMode('ace/mode/python');

  py2js_plugin = ace.edit('transpiler-py2js');

  py2js_plugin.setTheme('ace/theme/dawnjs');

  py2js_plugin.getSession().setMode('ace/mode/javascript');

  py2js_result_plugin = ace.edit('transpiler-py2js-result');

  py2js_result_plugin.setTheme('ace/theme/dawnjs');

  py2js_result_plugin.getSession().setMode('ace/mode/javascript');

  autocomplete_plugin.on('blur', function() {
    return eval(autocomplete_plugin.getValue());
  });

  js2py_plugin.on('blur', function() {
    eval(js2py_plugin.getValue());
    return js2py_result_plugin.setValue(window.compile_js2py());
  });

  py2js_plugin.on('blur', function() {
    eval(py2js_plugin.getValue());
    return py2js_result_plugin.setValue(window.compile_py2js());
  });

  eval(autocomplete_plugin.getValue());

  editor = ace.edit('editor');

  editor.setTheme('ace/theme/dawnjs');

  editor.getSession().setMode('ace/mode/javascript');

  focused = 0;

  editor.on('focus', function() {
    return focused = 1;
  });

  editor.on('blur', function() {
    return focused = 0;
  });

  tip = document.querySelector('#tip');

  editor_cursor = document.querySelector('#editor .ace_cursor');

  document.body.addEventListener('keyup', function(e) {
    var all_lines, cursor_left, cursor_pos, cursor_top, data, i, line, offset, ret, _i, _j, _len, _len1;
    if (!focused) {
      return false;
    }
    cursor_left = parseInt(editor_cursor.style.left);
    cursor_top = parseInt(editor_cursor.style.top);
    cursor_pos = editor.getCursorPosition();
    all_lines = editor.getSession().getDocument().getAllLines();
    offset = 0;
    for (i = _i = 0, _len = all_lines.length; _i < _len; i = ++_i) {
      line = all_lines[i];
      if (i === cursor_pos.row) {
        break;
      }
      offset += line.length + 1;
    }
    data = {
      script: editor.getValue(),
      cursor_pos: offset + cursor_pos.column
    };
    if (window.parseFlow) {
      ret = window.parseFlow(data.script, data.cursor_pos);
      tip.innerHTML = '';
      if (ret) {
        for (_j = 0, _len1 = ret.length; _j < _len1; _j++) {
          i = ret[_j];
          tip.innerHTML += i + '<br/>';
        }
        tip.style.left = cursor_left + 90 + 'px';
        tip.style.top = cursor_top + 70 + 'px';
        return tip.style.opacity = 1.0;
      } else {
        tip.style.left = 0;
        tip.style.top = 0;
        return tip.style.opacity = 0;
      }
    }
  });

}).call(this);

//# sourceMappingURL=demo.js.map
